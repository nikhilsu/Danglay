require 'rails_helper'

RSpec.describe SamlController, type: :controller do

  valid_response = ''

  before(:each) do
    user = build_stubbed(:user)
    names = user.name.split(' ')
    session[:FirstName] = names[0]
    session[:LastName] = names[1]
    session[:Email] = user.email
    end

  it 'init should redirect to okta login' do
    get :init
    expect(response.body).to include 'redirected'
    expect(response.location).to include 'https://dev-774694.oktapreview.com/app/thoughtworksdev774694_railsoktatest_1/exk5fn90zik3RdpS30h7/sso/saml'
  end


  it 'consume should parse valid saml response' do
    stub_response = OneLogin::RubySaml::Response.new(valid_response)

    allow(OneLogin::RubySaml::Response).to receive(:new).and_return(stub_response)

    allow(stub_response).to receive(:is_valid?).and_return(true)

    post :consume

    expect(stub_response.name_id).to be_truthy
    expect(stub_response.attributes).to be_truthy
    expect(response).to redirect_to root_url
  end

  it 'consume should parse valid saml response if admin should redirect to admin home' do
    stub_response = OneLogin::RubySaml::Response.new(valid_response)

    allow(OneLogin::RubySaml::Response).to receive(:new).and_return(stub_response)

    allow(stub_response).to receive(:is_valid?).and_return(true)

    user = build_stubbed(:user)
    names = user.name.split(' ')
    session[:FirstName] = names[0]
    session[:LastName] = names[1]
    session[:Email] = user.email
    role = build_stubbed(:role, :admin_role)
    user.role = role
    allow(User).to receive(:find_by).and_return(user)

    post :consume

    expect(stub_response.name_id).to be_truthy
    expect(stub_response.attributes).to be_truthy
    expect(response).to redirect_to admin_url
  end

  it 'consume should parse valid saml response with friendly forwarding' do
    stub_response = OneLogin::RubySaml::Response.new(valid_response)

    session[:forward_url] = 'host.com' if session[:forward_url].nil?

    allow(OneLogin::RubySaml::Response).to receive(:new).and_return(stub_response)

    allow(stub_response).to receive(:is_valid?).and_return(true)

    post :consume

    expect(stub_response.name_id).to be_truthy
    expect(stub_response.attributes).to be_truthy
    expect(response).to redirect_to 'host.com'
    session.clear
  end

  it 'consume should redirect to okta page on invalid saml response' do
    stub_response = OneLogin::RubySaml::Response.new(valid_response)
    allow(OneLogin::RubySaml::Response).to receive(:new).and_return(stub_response)
    allow(stub_response).to receive(:is_valid?).and_return(false)

    post :consume

    expect(response.location).to include 'https://dev-774694.oktapreview.com/app/thoughtworksdev774694_railsoktatest_1/exk5fn90zik3RdpS30h7/sso/saml'
  end
end
